###############################################################################
# For updating Java on Peoplesoft Machines
# 
# Created: 1/8/2016
# Last Edit: 1/26/2016
# Version 1.0
#  First build
# Version 1.1
#  Changed process wait function tobe compatible with older version of powershell
# version 2.0
#  Made this into a function
#  Modified file edit section to be more modular
#
#
###############################################################################
function update_java_PS(){
    param(
        [parameter(Mandatory=$false,ValueFromPipeLine=$true,ValueFromPipeLineByPropertyName=$true,HelpMessage='SourceFile?')]
        [string]$patchFilename = "e:\temp\p21689625_17091_MSWIN-x86-64\jdk-7u91-windows-x64.exe",
        [parameter(Mandatory=$false,ValueFromPipeLine=$true,ValueFromPipeLineByPropertyName=$true,HelpMessage='JDK version?')]
        [string]$newJDKVersion = "jdk1.7.0_91",
        [parameter(Mandatory=$false,ValueFromPipeLine=$true,ValueFromPipeLineByPropertyName=$true,HelpMessage='ProcessName?')]
        [string]$toProcessString = "jdk-7u91",
        [parameter(Mandatory=$false,ValueFromPipeLine=$true,ValueFromPipeLineByPropertyName=$true,HelpMessage='JRE version?')]
        [string]$newJREVersion = "jre7"

    )
    if ($toprocessString.Substring($toprocessString.Length-1,1) -ne "*"){
        $toProcessString = $toProcessString + "*"
    }
    write-host "Checking existing version"
    $middlewarePath = "e:\oracle\Middleware_pt853\"
    $javapath = $middlewarePath + "java\"
    $currentJava = Get-ChildItem $javapath | Where-Object {$_.name -like "jdk*"} | ?{$_.PSIsContainer} | select Name


    $fromString = $null

    if ($currentJava | Where-Object {$_.name -like $newJDKVersion}){
        write-host "Your target version of Java is already installed: " $newJDKVersion
        read-host "Press any key to continue"
    }else{
        if ($currentJava.Count){
            $myCounter = 0
            for($myCounter = 0; $myCounter -lt $CurrentJava.Count; $myCounter++){
                write-host $mycounter : $currentJava[$myCounter].name.toString()
            }

            $myCounter = $myCounter - 1
            $ans1 = read-host "Select the current Java version being used by PeopleSoft (0-$myCounter)"

            if (($ans1 -ge 0) -and ($ans1 -le $myCounter)){
                $fromString = $currentJava[$ans1].name.tostring()
            }else{
                write-host "Unknown Java version selected"
                read-host "Press any key to continue"
            }
        }else{
            $fromString = $currentJava.name.toString()
        }
    }

    if ($fromString -ne $null){
        write-host "Current Java Version: " $fromString
        write-host "Installing JDK and JRE"
        
        $JDKInstallDir = $javapath + $newJDKVersion
        $JREInstallDir = $javapath + $newJREVersion
        $LogLocation = $javapath + $newJDKVersion + ".log"
        #Check the flags, this was tested with JDK 7 update 91. Different version may not accept all these flags
        $argumentString = '/s ADDLOCAL="ToolsFeature,SourceFeature,PublicjreFeature" /INSTALLDIR="' + $JDKInstallDir + '" /INSTALLDIRPUBJRE="' + $JREInstallDir + '" /L "' + $LogLocation + '"'
        start-process $patchFilename -ArgumentList $argumentString -verb runas

        $psoftprocesses = get-process | Where-Object {($_.name -like $toProcessString)}
        if ($psoftprocesses){
            write-host $psoftprocesses
            write-host "Installer running in background. Waiting." -NoNewline
        }

        do{
            $psoftprocesses = get-process | Where-Object {($_.name -like $toProcessString)}
            write-host -NoNewline "."
            start-sleep -Seconds 30
        }while ($psoftprocesses)
        write-host "Done"
    

        $alleditPaths = @($middlewarePath + "utils\bsu\bsu.cmd") + 
                        @($middlewarePath + "utils\bsu\bsu.sh") + 
                        @($middlewarePath + "utils\quickstart\quickstart.cmd")+
                        @($middlewarePath + "utils\quickstart\quickstart.sh")+
                        @($middlewarePath + "utils\uninstall\uninstall.cmd")+
                        @($middlewarePath + "utils\uninstall\uninstall.sh")+
                        @($middlewarePath + "wlserver_10.3\common\bin\commEnv.cmd")+
                        @($middlewarePath + "wlserver_10.3\common\bin\commEnv.sh")

        foreach($editpath in $alleditPaths){
            $splitArray = $editpath.split("\")
            $editFileName = $splitArray[($splitArray.Count-1)] 
            write-host "Update" $editpath
            if(test-path $editpath){
                $relocateFile = "e:\temp\" + $editFileName
                cp $editpath $relocateFile -force
                (get-content $editpath) -replace $fromstring,$newJDKVersion | set-content $editpath
            }
        }

        $regPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\environment"
        write-host "Update" $regPath
        if (test-path $regPath){
            $newValue = $JavaPath + $newJDKVersion
            Set-ItemProperty -path $regPath -name JAVA_HOME -value $newValue
        }

        write-host "Files updated"    
    }
    


    $webServPath = $env:PS_CFG_HOME + "\webserv"
    $webDomains = Get-ChildItem $webServPath | Where-Object {$_.name -like "peoplesoft*"} | ?{$_.PSIsContainer}

     $ans = read-host "Reinstall domains (y/n)?"
     if ($ans.ToUpper() -eq 'Y'){
        write-host "stopping services"
        $psoftservices = get-service | Where-Object {($_.name -notlike "peoplesoft_*")} | Where-Object {($_.name -notlike "peoplesoft  E:\pt*")} | Where-Object {($_.name -like "peoplesoft*")} 
        
        if ($psoftservices){
            stop-service -InputObject $psoftservices -warningaction SilentlyContinue -ErrorAction SilentlyContinue
            $desiredState = "Stopped"
            do{
                $counter = 0
                foreach($psvc in $psoftservices){
                    if($psvc.status -ne $desiredstate){
                        $counter++
                    }
                }
                sleep -Seconds 1
            }until ($counter -eq 0)

            foreach ($psvc in $psoftservices){
                write-host $psvc.status $psvc
            }

            foreach ($domain in $webdomains){
                $subpath = $webServPath + '\' + $domain + '\bin'
                $installExecutable = get-childitem "$subpath" | where-object {$_.name -like "uninstallNTService.cmd"} | select -expandproperty PSPath
                $installArguments = "PIA"
                write-host $installExecutable 'PIA'
                start-process $installExecutable -ArgumentList $installArguments -wait -Verb runas
                write-host $installExecutable
                start-process $installExecutable -wait -Verb runas

                $installExecutable = get-childitem "$subpath" | where-object {$_.name -like "installNTService.cmd"} | select -expandproperty PSPath
                $installArguments = "PIA"
                write-host $installExecutable
                start-process $installExecutable -wait -Verb runas
                write-host $installExecutable 'PIA'
                start-process $installExecutable -ArgumentList $installArguments -wait -Verb runas
            }

            write-host "Starting services"
            start-service -InputObject $psoftservices -WarningAction SilentlyContinue -ErrorAction SilentlyContinue

            $desiredState = "Running"
            do{
                $counter = 0
                foreach($psvc in $psoftservices){
                    if($psvc.status -ne $desiredstate){
                        $counter++
                    }
                }
                sleep -Seconds 1
            }until ($counter -eq 0)

            foreach ($psvc in $psoftservices){
                write-host $psvc.status $psvc
            }
        }else{
            write-host "Web services does not exist on this machine"
        }
     }else{
        write-host "Cancelled"

     }
}
